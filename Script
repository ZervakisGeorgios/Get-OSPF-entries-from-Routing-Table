import paramiko
from pprint import pprint
import re
import time

# Print heading
print ('')
print ('Interfaces, routes list, routes details')
print ('---------------------------------------')
# Create regular expressions to match interfaces and OSPF
# adjust the interface as necessary
OSPF_pattern = re.compile('^O')
# intf_pattern = re.compile('(GigabitEthernet)([0-9]\/[0-9])')
intf_pattern = re.compile('(Vlan)([0-9]{1,3})')
# Create regular expressions to match prefix and routes
prefix_pattern = re.compile('^O.{0,8}([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\/[0-9]{1,2})')
# because there are multiple IPs in each line, 'via' captures only the next hop IP
route_pattern = re.compile('via ([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})')



SESSION = paramiko.SSHClient()
SESSION.set_missing_host_key_policy(paramiko.AutoAddPolicy())
SESSION.connect('10.48.70.66', port=22, username='cisco', password='cisco', look_for_keys=False,allow_agent=False)
DEVICE_ACCESS = SESSION.invoke_shell()
DEVICE_ACCESS.send(b'terminal length 0\n')
time.sleep(2)
DEVICE_ACCESS.send(b'show ip route\n')
time.sleep(2)
output = DEVICE_ACCESS.recv(65000)
s = str(output)
print (output.decode('ascii'))
routes_list = []
routes_list = output.decode('ascii').splitlines()
# print(s1)
intf_routes= {}# Create dictionary to hold number of routes per interface

for route in routes_list:
    OSPF_match = OSPF_pattern.search(route)
    if OSPF_match:
        int_match = intf_pattern.search(route)
        if int_match:
            intf = int_match.group(0)
            
            if intf not in intf_routes: # If route list not yet created, do so now
                intf_routes[intf] = []
            # Extract the prefix (destination IP address/subnet)
            prefix_match = prefix_pattern.search(route)
            prefix = prefix_match.group(1)

            # Extract the route
            route_match = route_pattern.search(route)
            next_hop = route_match.group(1)

            # Create dictionary for this route, and add it to the list
            route = {'prefix':prefix,'next-hop':next_hop}
            intf_routes[intf].append(route)
pprint(intf_routes)
SESSION.close()
